//---------------------------------ros_spido------------------------------------
/* This node is a simple control interface for the fast-b robot from Robosoft.
 * The node subscribes to the "/cmd_car" topic with a message of type "cmd_car"
 * --------------------------
 * cmd_car message structure:
 * float32 linear_speed
 * float32 steering_angle
 * --------------------------
 * The callback function carCallback will transmit the target linear_speed and
 * steering_angle to the robot using the pure interface (interface.c)
 * -----------------------------------------------------------------------------
 * -----------------------------NEXT STEPS--------------------------------------
 * This is the only working feature for now, but there is a TODO list:
 * 
 * *Run some security tests
 * 
 * *Subscribe to another topic (cmd_drive for instance) to control the robot
 * giving two steering angles and each wheel speed.
 * 
 * *Same thing to control the two roll bars
 * 
 * *Publish diagnostic
 * 
 * *Publish each available data from the sensors
 * 
 * *Publish the laser data into a standard ROS laserscan message
 * 
 * *Anything else?
 * ----------------------------------END----------------------------------------
*/




#include "ros/ros.h"
#include "std_msgs/String.h"
#include "spido_pure_interface/cmd_car.h"


#include <sstream>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/time.h>

#include <unistd.h>
#include <stdint.h>
#include <pthread.h>
#include <signal.h>

extern "C"{
#include "interface.h"                     //Pure communication library (C code)
}                  

void process_notification(int service, float timestamp, void *data)
{
  printf("Notification callback from %i\n", service);
}

void carCallback(const ros_spido::cmd_car::ConstPtr& msg)
{
  //Test cmd line: # rostopic pub  /cmd_car ros_spido/cmd_car -- 1 1
  ROS_INFO("Received cmd_car: linear_speed: %f | steering_angle %f",
	   msg->linear_speed, msg->steering_angle);
  struct pure_car_service_target_t car_target;
  car_target.enable = 1;
  car_target.speed = msg->linear_speed; 	           //target linear speed (m/s)
  car_target.steering = msg->steering_angle;             //target steering (rad)
  
  pure_send_message_t message;
  message.notification.identifier = 0xFF;
  message.notification.target = 0x003;
  memcpy(message.notification.data, (void *)&car_target, sizeof(car_target));
  pure_send_message(message.buffer, sizeof(car_target)+3);
  //TODO: security test: what happends if the connection is lost while linear_speed <> 0 ?
  
  /*
  ros_spido::cmd_car msg_feedback;
  msg_feedback.linear_speed = msg->linear_speed;
  msg_feedback.steering_angle = msg->steering_angle;
  cmd_car_feedback.publish(msg_feedback);
  */ //TODO: implement cmd_car_feedback (or juste remove this feature, need to discuss it)
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "talker");
  ros::NodeHandle n;
  //TODO: subscibe and publish on the good topics with appropriate message type
  //ros::Publisher cmd_car_feedback = //TODO: remove or implement this
  //n.advertise<ros_spido::cmd_car>("cmd_car_feedback", 1000);
  ros::Subscriber sub = n.subscribe("cmd_car", 1000, carCallback);
  ros::Rate loop_rate(10); 		                //Loop rate for the main loop (Hz)
  
//--------------------------Pure communication init-----------------------------
  uint16_t diagnostic_instance = 0;
  pure_services_t *services;
  
  pure_connection_start("192.168.1.2", 60000, process_notification);
  
  pure_directory_init();
  pure_directory_print();
  services = pure_directory_list();
    
//--------------------Search diagnostic service instance------------------------
  for(size_t i=0; i < services->number; i++)
    if(services->list[i].type = 0x0002)
      diagnostic_instance = services->list[i].instance;

  if(diagnostic_instance != 0) {
    pure_diagnostic_init(diagnostic_instance);
    pure_diagnostic_refresh();
    pure_diagnostic_print();
  };
 
  
//----------------------------Laser service-------------------------------------
  struct pure_laser_config_t laser_config;
  int len;
  pure_send_request(0x0006, pure_action_GET,
		    NULL, 0,(void *)&laser_config,&len);

  printf("\nLaser service data:\n");
  printf("x_pos= %.3f\n", laser_config.x_pos);
  printf("y_pos= %.3f\n", laser_config.y_pos);
  printf("heading= %.3f\n", laser_config.heading);
  printf("nb_echos= %i\n", laser_config.nb_echos);
//-------------------------Laser service END------------------------------------

  
  while (ros::ok())
  {
    /*
    std_msgs::String msg;

    std::stringstream ss;
    ss << "hello world ";
    msg.data = ss.str();
    */
    
    //ros_spido::cmd_car msg;
    //cmd_car_feedback.publish(msg);
    
/*
//---------------------------------TEST Section---------------------------------      
    struct pure_car_service_target_t car_target;
    car_target.enable = 1;
    car_target.speed = 0.0; 			     //target linear speed (m/s)
    car_target.steering = 0.3;			         //target steering (rad)
    
    pure_send_message_t message;
    message.notification.identifier = 0xFF;
    message.notification.target = 0x003;
    memcpy(message.notification.data, (void *)&car_target, sizeof(car_target));
    pure_send_message(message.buffer, sizeof(car_target)+3);
    
    sleep(1);
    
    car_target.steering = -0.3;
    message.notification.identifier = 0xFF;
    message.notification.target = 0x003;
    memcpy(message.notification.data, (void *)&car_target, sizeof(car_target));
    pure_send_message(message.buffer, sizeof(car_target)+3);

    sleep(1);
//-------------------------------END TEST Section-------------------------------
*/

    ros::spinOnce();

    loop_rate.sleep();
  }
  pure_connection_stop();  
  return 0;
}
